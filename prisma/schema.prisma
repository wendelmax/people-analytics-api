datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Employees table
model Employees {
  id                              Int                               @id @default(autoincrement())
  name                            String
  email                           String                            @unique
  password                        String
  department_id                   Int
  position_id                     Int
  department                      Departments                       @relation(fields: [department_id], references: [id])
  position                        Positions                         @relation(fields: [position_id], references: [id])
  skills_assessments              Skills_Assessments[]
  evaluator_assessments           Skills_Assessments[]              @relation("Evaluator_Assessments")
  career_aspirations              Employee_Career_Aspirations[]
  development_progress            Employee_Development_Progress[]
  feedbacks                       Employee_Feedback[]
  notifications                   Notification[]
  chatbot_interactions            Chatbot_Interaction[]
  Employee_Performance_Evaluation Employee_Performance_Evaluation[]
  Employee_Metrics                Employee_Metrics?
  skills_assessment_evaluations   Skills_Assessment_Evaluators[]    @relation("Evaluator_Employee")
  performance_evaluation_reviews  Performance_Evaluation_Evaluators[] @relation("PerformanceEvaluator_Employee")
}

// Departments table
model Departments {
  id                  Int                           @id @default(autoincrement())
  name                String                        @unique
  employees           Employees[]
  positions           Positions[]
  experience_journeys Employee_Experience_Journey[] // Counterpart for relation with Employee_Experience_Journey
}

// Positions table
model Positions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  department_id    Int
  level            Int
  department       Departments        @relation(fields: [department_id], references: [id])
  employees        Employees[]
  career_positions Career_Positions[]
}

// Available Skills Inventory
model Skills_Inventory {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  type               SkillType
  description        String
  category           String
  skills_assessments Skills_Assessments[]
  development_items  Development_Items[]
}

enum SkillType {
  HARD
  SOFT
}

// Employee skills assessments
model Skills_Assessments {
  id                Int                            @id @default(autoincrement())
  employee_id       Int
  skill_id          Int
  proficiency_level Int
  assessment_date   DateTime                       @default(now())
  employee          Employees                      @relation(fields: [employee_id], references: [id])
  skill             Skills_Inventory               @relation(fields: [skill_id], references: [id])
  evaluators        Skills_Assessment_Evaluators[]
  evaluator_assessments Employees[]                @relation("Evaluator_Assessments") // Field added to complete relation

  @@unique([employee_id, skill_id, assessment_date])
}


// New table to handle multiple evaluators in skills assessments
model Skills_Assessment_Evaluators {
  id                   Int                @id @default(autoincrement())
  skills_assessment_id Int
  evaluator_id         Int
  skills_assessment    Skills_Assessments @relation(fields: [skills_assessment_id], references: [id])
  evaluator            Employees          @relation("Evaluator_Employee", fields: [evaluator_id], references: [id])

  @@unique([skills_assessment_id, evaluator_id])
}

// Career positions within departments
model Career_Positions {
  id                   Int                           @id @default(autoincrement())
  name                 String                        @unique
  description          String
  position_id          Int
  requirements         Json
  career_pathways_from Career_Pathways[]             @relation("FromPosition")
  career_pathways_to   Career_Pathways[]             @relation("ToPosition")
  aspirations          Employee_Career_Aspirations[]
  position             Positions                     @relation(fields: [position_id], references: [id])
}

// Career pathways between positions
model Career_Pathways {
  id               Int              @id @default(autoincrement())
  from_position_id Int
  to_position_id   Int
  description      String
  from_position    Career_Positions @relation("FromPosition", fields: [from_position_id], references: [id])
  to_position      Career_Positions @relation("ToPosition", fields: [to_position_id], references: [id])

  @@unique([from_position_id, to_position_id])
}

// Employee career aspirations
model Employee_Career_Aspirations {
  id                     Int              @id @default(autoincrement())
  employee_id            Int
  aspiration_position_id Int
  creation_date          DateTime         @default(now())
  update_date            DateTime         @updatedAt
  employee               Employees        @relation(fields: [employee_id], references: [id])
  aspiration_position    Career_Positions @relation(fields: [aspiration_position_id], references: [id])

  @@unique([employee_id, aspiration_position_id])
}

// Employee experience journey
model Employee_Experience_Journey {
  id            Int                   @id @default(autoincrement())
  name          String                @unique
  description   String
  department_id Int
  department    Departments           @relation(fields: [department_id], references: [id])
  touchpoints   Journey_Touchpoints[]
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
}

// Touchpoints along the experience journey
model Journey_Touchpoints {
  id                 Int                         @id @default(autoincrement())
  journey_id         Int
  name               String
  description        String
  type               TouchpointType
  order              Int
  experience_journey Employee_Experience_Journey @relation(fields: [journey_id], references: [id])
  employee_feedbacks Employee_Feedback[]

  @@unique([journey_id, order])
}

enum TouchpointType {
  ONBOARDING
  PERFORMANCE_REVIEW
  TRAINING
  FEEDBACK_SESSION
  EXIT_INTERVIEW
  OTHER
}

// Feedback provided by employees on touchpoints
model Employee_Feedback {
  id            Int                 @id @default(autoincrement())
  employee_id   Int
  touchpoint_id Int
  comment       String
  sentiment     SentimentType
  feedback_date DateTime            @default(now())
  employee      Employees           @relation(fields: [employee_id], references: [id])
  touchpoint    Journey_Touchpoints @relation(fields: [touchpoint_id], references: [id])
}

enum SentimentType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

// Notifications sent to employees
model Notification {
  id            Int       @id @default(autoincrement())
  employee_id   Int
  title         String
  message       String
  read          Boolean   @default(false)
  creation_date DateTime  @default(now())
  employee      Employees @relation(fields: [employee_id], references: [id])
}

// Development items, such as courses and training
model Development_Items {
  id                Int                             @id @default(autoincrement())
  name              String
  description       String
  type              DevelopmentType
  skill_id          Int
  link              String
  skill             Skills_Inventory                @relation(fields: [skill_id], references: [id])
  employee_progress Employee_Development_Progress[]
}

enum DevelopmentType {
  TRAINING
  CERTIFICATION
  PROJECT
}

// Individual development progress of employees
model Employee_Development_Progress {
  id                  Int               @id @default(autoincrement())
  employee_id         Int
  development_item_id Int
  completion_date     DateTime          @default(now())
  employee            Employees         @relation(fields: [employee_id], references: [id])
  development_item    Development_Items @relation(fields: [development_item_id], references: [id])

  @@unique([employee_id, development_item_id])
}

// Record of chatbot interactions for support
model Chatbot_Interaction {
  id               Int       @id @default(autoincrement())
  employee_id      Int
  user_message     String
  chatbot_response String
  interaction_date DateTime  @default(now())
  employee         Employees @relation(fields: [employee_id], references: [id])
}

// General performance evaluations for employees
model Employee_Performance_Evaluation {
  id                Int                                 @id @default(autoincrement())
  employee_id       Int
  evaluation_date   DateTime                            @default(now())
  overall_score     Float
  strengths         String // Areas where the employee performed well
  improvement_areas String // Areas identified for improvement
  comments          String // General comments on performance
  employee          Employees                           @relation(fields: [employee_id], references: [id])
  evaluators        Performance_Evaluation_Evaluators[]

  @@unique([employee_id, evaluation_date])
}

// New table to handle multiple evaluators in performance evaluations
model Performance_Evaluation_Evaluators {
  id                        Int                             @id @default(autoincrement())
  performance_evaluation_id Int
  evaluator_id              Int
  performance_evaluation    Employee_Performance_Evaluation @relation(fields: [performance_evaluation_id], references: [id])
  evaluator                 Employees                       @relation("PerformanceEvaluator_Employee", fields: [evaluator_id], references: [id])

  @@unique([performance_evaluation_id, evaluator_id])
}

// Aggregated development and evaluation metrics for employees
model Employee_Metrics {
  id                          Int       @id @default(autoincrement())
  employee_id                 Int
  average_proficiency_level   Float // Average proficiency level across skills
  total_positive_feedbacks    Int // Total count of positive feedbacks
  total_neutral_feedbacks     Int // Total count of neutral feedbacks
  total_negative_feedbacks    Int // Total count of negative feedbacks
  completed_development_items Int // Number of completed development items
  last_updated                DateTime  @default(now()) @updatedAt
  employee                    Employees @relation(fields: [employee_id], references: [id])

  @@unique([employee_id])
}
